#include"workerManager.h"
#include"worker.h"
#include"employee.h"
#include"manager.h"
#include"boss.h"

WorkerManager::WorkerManager()
{
	ifstream ifs(FILENAME, ios::in);

	// 文件不存在情况
	if (!ifs.is_open())
	{
		// 测试输出
		//cout << "文件不存在" << endl;

		// 初始化人数
		this->m_EmpNum = 0;

		// 初始化文件为空标志
		this->m_FileIsEmpty = true;

		// 初始化数组指针
		this->m_EmpArray = NULL;

		ifs.close();
		return;
	}
	
	// 文件存在，并且没有记录
	char ch;
	ifs >> ch;
	if (ifs.eof())
	{
		//cout << "文件为空！" << endl;
		this->m_EmpNum = 0;
		this->m_FileIsEmpty = true;
		this->m_EmpArray = NULL;
		ifs.close();
		return; 
	}

	// 文件存在，且记录了数据
	int num = this->getEmpNum();
	//cout << "职工人数为" << num << endl;
	this->m_EmpNum = num;

	// 根据职工数创建数组
	this->m_EmpArray = new Worker * [this->m_EmpNum];
	// 初始化职工
	initEmp();

	// 测试代码
	//for (int i = 0; i < m_EmpNum; i++)
	//{
	//	cout << "职工编号：" << this->m_EmpArray[i]->m_ID
	//		<< " 姓名：" << this->m_EmpArray[i]->m_Name
	//		<< " 部门编号：" << this->m_EmpArray[i]->m_DeptID << endl;
	//}
}

WorkerManager::~WorkerManager()
{
	if (this->m_EmpArray != NULL)
	{
		for (int i = 0; i < this->m_EmpNum; i++)
		{
			if (this->m_EmpArray[i] != NULL)
			{
				delete this->m_EmpArray[i];
				this->m_EmpArray[i] = NULL;
			}
		}

		delete[] this->m_EmpArray;
		this->m_EmpArray = NULL;
	}
}

void WorkerManager::showMenu()
{
	cout << "***************************************************" << endl;
	cout << "**********  欢迎使用职工管理系统！  ***************" << endl;
	cout << "**************  0.退出管理程序  *******************" << endl;
	cout << "**************  1.增加职工信息  *******************" << endl;
	cout << "**************  2.显示职工信息  *******************" << endl;
	cout << "**************  3.删除离职职工  *******************" << endl;
	cout << "**************  4.修改职工信息  *******************" << endl;
	cout << "**************  5.查找职工信息  *******************" << endl;
	cout << "**************  6.按照编号排序  *******************" << endl;
	cout << "**************  7.清空所有文档  *******************" << endl;
	cout << "***************************************************" << endl;
	cout << endl;
}

void WorkerManager::addEmp()
{
	cout << "请输入增加职工数量：" << endl;

	int addNum = 0;
	cin >> addNum;

	if (addNum > 0)
	{
		// 计算新空间大小
		int newSize = this->m_EmpNum + addNum; // 新空间人数 = 原记录人数+新增人数

		// 开辟新空间
		Worker** newSpace = new Worker * [newSize];

		// 将原空间内容存放到新空间下
		if (this->m_EmpArray != NULL)
		{
			for (int i = 0; i < this->m_EmpNum; i++)
			{
				newSpace[i] = this->m_EmpArray[i];
			}
		}

		// 输入新数据
		for (int i = 0; i < addNum; i++)
		{
			int id;
			string name;
			int dSelect;

			cout << "请输入第" << i + 1 << "个新职工编号：" << endl;
			while (!(cin >> id) || checkid(id))
			{
				cin.clear();
				while (cin.get() != '\n')
				{
					continue;
				}
				cout << "请重新输入编号：" << endl;
			}

			cout << "请输入第" << i + 1 << "个新职工姓名：" << endl;
			cin >> name;

			cout << "请选择该职工的岗位：" << endl;
			cout << "1、普通职工" << endl;
			cout << "2、经理" << endl;
			cout << "3、老板" << endl;
			while (!(cin >> dSelect))
			{
				cin.clear();
				while (cin.get() != '\n')
				{
					continue;
				}
				cout << "请重新选择岗位：" << endl;
			}

			Worker* worker = NULL;
			switch (dSelect)
			{
			case 1: // 普通员工
				worker = new Employee(id, name, dSelect);
				break;
			case 2: // 经理
				worker = new Manager(id, name, dSelect);
				break;
			case 3: // 老板
				worker = new Boss(id, name, dSelect);
				break;
			default:
				break;
			}

			newSpace[this->m_EmpNum + i] = worker;
		}

		// 释放原有空间
		delete[] this->m_EmpArray;

		// 更改新空间的指向
		this->m_EmpArray = newSpace;

		// 更新新的个数
		this->m_EmpNum = newSize;

		// 更新职工不为空标志
		this->m_FileIsEmpty = false;

		// 提示信息
		cout << "成功添加" << addNum << "名新职工！" << endl;

		// 保存到文件中
		this->save();
	}
	else
	{
		cout << "输入有误！" << endl;
	}

	system("pause");
	system("cls");
}

void WorkerManager::exitSystem()
{
	cout << "欢迎下次使用" << endl;
	system("pause");
	exit(0); // 退出程序
}

void WorkerManager::save()
{
	ofstream ofs(FILENAME, ios::out);

	for (int i = 0; i < this->m_EmpNum; i++)
	{
		ofs << this->m_EmpArray[i]->m_ID << " "
			<< this->m_EmpArray[i]->m_Name << " "
			<< this->m_EmpArray[i]->m_DeptID << endl;
	}

	ofs.close();
}

int WorkerManager::getEmpNum()
{
	ifstream ifs;
	ifs.open(FILENAME, ios::in);

	int id;
	string name;
	int d_id;

	int num = 0;

	while (ifs >> id && ifs >> name && ifs >> d_id)
	{
		// 记录人数
		num++;
	}
	ifs.close();
	return num;
}

void WorkerManager::initEmp()
{
	ifstream ifs(FILENAME, ios::in);

	int id;
	string name;
	int d_id;

	int index = 0;
	while (ifs >> id && ifs >> name && ifs >> d_id)
	{
		Worker* worker = NULL;
		// 根据不同的部门ID创建不同对象
		if (d_id == 1)
		{
			worker = new Employee(id, name, d_id);
		}
		else if (d_id == 2)
		{
			worker = new Manager(id, name, d_id);
		}
		else if (d_id == 3)
		{
			worker = new Boss(id, name, d_id);
		}
		
		// 存放到数组中
		this->m_EmpArray[index] = worker;
		index++;
	}
	ifs.close();
}

void WorkerManager::showEmp()
{
	if (this->m_FileIsEmpty)
	{
		cout << "文件不存在或记录为空！" << endl;
	}
	else
	{
		for (int i = 0; i < this->m_EmpNum; i++)
		{
			// 利用多态调试接口
			this->m_EmpArray[i]->showInfo();
		}
	}

	system("pause");
	system("cls");
}

int WorkerManager::IsExist(int id)
{
	int index = -1;

	for (int i = 0; i < this->m_EmpNum; i++)
	{
		if (this->m_EmpArray[i]->m_ID == id)
		{
			index = i;
			break;
		}
	}

	return index;
}

void WorkerManager::delEmp()
{
	if (this->m_FileIsEmpty)
	{
		cout << "文件不存在或记录为空，无法删除！" << endl;
	}
	else
	{
		// 按照职工编号删除
		cout << "请输入想要删除的职工编号：" << endl;
		int id;
		while (!(cin >> id))
		{
			cin.clear();
			while (cin.get() != '\n')
			{
				continue;
			}
			cout << "请重新输入职工编号：" << endl;
		}

		int index = this->IsExist(id);
		
		if (index != -1) // 说明职工存在，并且要删除index位置上的职工
		{
			// 数据前移
			for (int i = index; i < this->m_EmpNum - 1; i++)
			{
				this->m_EmpArray[i] = this->m_EmpArray[i + 1];
			}
			this->m_EmpArray[m_EmpNum - 1] = NULL;
			this->m_EmpNum--; // 更新数组中记录的人员个数
			// 数据同步更新到文件中
			this->save();
			cout << "删除成功！" << endl;
			if (this->m_EmpNum == 0)
			{
				this->m_FileIsEmpty = true;
				this->m_EmpArray = NULL;
			}

		}
		else
		{
			cout << "未找到该职工，删除失败！" << endl;
		}
	}

	// 按任意键 清屏
	system("pause");
	system("cls");
}

void WorkerManager::modEmp()
{
	if (this->m_FileIsEmpty)
	{
		cout << "文件不存在或记录为空，无法修改！" << endl;
	}
	else
	{
		cout << "请输入修改职工的编号：" << endl;
		int id;
		while (!(cin >> id))
		{
			cin.clear();
			while (cin.get() != '\n')
			{
				continue;
			}
			cout << "请重新输入职工编号：" << endl;
		}

		int ret = this->IsExist(id);
		if (ret != -1)
		{
			// 查找到编号的职工
			delete this->m_EmpArray[ret];

			int newid;
			string newname;
			int newdSelect = 0;

			cout << "查到：" << id << "号职工，请输入新职工号：" << endl;

			while (!(cin >> newid) || checkid(newid))
			{
				cin.clear();
				while (cin.get() != '\n')
				{
					continue;
				}
				cout << "请重新输入新职工编号：" << endl;
			}

			cout << "请输入新职工姓名：" << endl;
			cin >> newname;

			cout << "请输入新岗位：" << endl;
			cout << "1、普通职工" << endl;
			cout << "2、经理" << endl;
			cout << "3、老板" << endl;

			while (!(cin >> newdSelect))
			{
				cin.clear();
				while (cin.get() != '\n')
				{
					continue;
				}
				cout << "请重新输入新职工部门编号：" << endl;
			}

			Worker* worker = NULL;
			switch (newdSelect)
			{
			case 1:
				worker = new Employee(newid, newname, newdSelect);
				break;
			case 2:
				worker = new Manager(newid, newname, newdSelect);
				break;
			case 3:
				worker = new Boss(newid, newname, newdSelect);
				break;
			default:
				break;
			}

			// 更改数据到数组中
			this->m_EmpArray[ret] = worker;

			cout << "修改成功！" << endl;

			// 保存到文件中
			this->save();
		}
		else
		{
			cout << "修改失败，查无此人！" << endl;
		}
	}
	system("pause");
	system("cls");
}

void WorkerManager::findEmp()
{
	if (this->m_FileIsEmpty)
	{
		cout << "文件不存在或记录为空，无法查找职工！" << endl;
	}
	else
	{
		cout << "请输入查找的方式：" << endl;
		cout << "1、按职工编号查找" << endl;
		cout << "2、按姓名查找" << endl;

		int select;

		while (!(cin >> select))
		{
			cin.clear();
			while (cin.get() != '\n')
			{
				continue;
			}
			cout << "请重新选择查找方式：" << endl;
		}

		// 按职工号查找
		if (select == 1)
		{
			int id;
			cout << "请输入查找的职工编号：" << endl;
			while (!(cin >> id))
			{
				cin.clear();
				while (cin.get() != '\n')
				{
					continue;
				}
				cout << "请重新输入职工编号：" << endl;
			}

			int ret = IsExist(id);
			if (ret != -1)
			{
				cout << "查找成功！该职工信息如下：" << endl;
				this->m_EmpArray[ret]->showInfo();
			}
			else
			{
				cout << "查找失败，查无此人！" << endl;
			}
		}
		// 按姓名查找
		else if (select == 2)
		{
			string name;
			cout << "请输入查找的姓名：" << endl;
			cin >> name;

			// 查找到的标志
			bool flag = false;
			for (int i = 0; i < m_EmpNum; i++)
			{
				if (m_EmpArray[i]->m_Name == name)
				{
					cout << "查找成功！职工编号为"
						<< m_EmpArray[i]->m_ID
						<< "号的信息如下：" << endl;

					flag = true;
					this->m_EmpArray[i]->showInfo();
				}
			}
			if (flag == false)
			{
				// 查无此人
				cout << "查找失败，查无此人！" << endl;
			}
		}
		else
		{
			cout << "输入选项有误！" << endl;
		}
	}

	system("pause");
	system("cls");
}

bool WorkerManager::checkid(int newid)
{
	bool flag = false;

	for (int i = 0; i < this->m_EmpNum; i++)
	{
		if (this->m_EmpArray[i]->m_ID == newid)
		{
			flag = true;
			break;
		}
	}

	return flag;
}

void WorkerManager::sortEmp()
{
	if (this->m_FileIsEmpty)
	{
		cout << "文件不存在或记录为空，无法排序！" << endl;
		system("pause");
		system("cls");
	}
	else
	{
		cout << "请选择排序方式：" << endl;
		cout << "1、按职工号进行升序排序" << endl;
		cout << "2、按职工号进行降序排序" << endl;

		int select;
		while (!(cin >> select))
		{
			cin.clear();
			while (cin.get() != '\n')
			{
				continue;
			}
			cout << "请重新选择排序方式：" << endl;
		}
		
		for (int i = 0; i < m_EmpNum; i++)
		{
			int minOrMax = i;
			for (int j = i + 1; j < m_EmpNum; j++)
			{
				if (select == 1) // 升序
				{
					if (m_EmpArray[minOrMax]->m_ID > m_EmpArray[j]->m_ID)
					{
						minOrMax = j;
					}
				}
				else // 降序
				{
					if (m_EmpArray[minOrMax]->m_ID < m_EmpArray[j]->m_ID)
					{
						minOrMax = j;
					}
				}
			}

			if (i != minOrMax)
			{
				Worker* temp = m_EmpArray[i];
				m_EmpArray[i] = m_EmpArray[minOrMax];
				m_EmpArray[minOrMax] = temp;
			}
		}

		cout << "排序成功，排序后结果为：" << endl;
		this->save();
		this->showEmp(); // 这里已经包含了pause和cls
	}
}

void WorkerManager::cleanFile()
{
	cout << "确认清空？" << endl;
	cout << "1、确认" << endl;
	cout << "2、取消" << endl;

	int select;
	while (!(cin >> select))
	{
		cin.clear();
		while (cin.get() != '\n')
		{
			continue;
		}
		cout << "请重新输入选择：" << endl;
	}

	if (select == 1)
	{
		// 打开模式 ios::trunc 如果存在则删除文件并重新创建
		ofstream ofs(FILENAME, ios::trunc);
		ofs.close();

		if (this->m_EmpArray != NULL)
		{
			for (int i = 0; i < this->m_EmpNum; i++)
			{
				if (this->m_EmpArray[i] != NULL)
				{
					delete this->m_EmpArray[i];
					this->m_EmpArray[i] = NULL;
				}
			}
			this->m_EmpNum = 0;
			delete[] this->m_EmpArray;
			this->m_EmpArray = NULL;
			this->m_FileIsEmpty = true;
		}
		cout << "清空成功！" << endl;
	}

	system("pause");
	system("cls");
}